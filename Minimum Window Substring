class Solution {
    public String minWindow(String s, String t) {
       if(s.length()<t.length()) 
           return "";
        Map<Character,Integer>targetMap=new HashMap<>();
        for(char c:t.toCharArray())targetMap.put(c,targetMap.getOrDefault(c,0)+1);
        int left=0,minLeft=0,minLen=Integer.MAX_VALUE,count=0;
        Map<Character,Integer>windowMap=new HashMap<>();
        for(int right=0;right<s.length();right++){
            char c=s.charAt(right);
            windowMap.put(c,windowMap.getOrDefault(c,0)+1);
            if (targetMap.containsKey(c) && windowMap.get(c).intValue() <= targetMap.get(c).intValue()) count++;
            while(count==t.length()){
                if(right-left+1<minLen){
                    minLen=right-left+1;
                    minLeft=left;
                }
                char leftChar=s.charAt(left);
                windowMap.put(leftChar, windowMap.get(leftChar) - 1);
                if (targetMap.containsKey(leftChar) && windowMap.get(leftChar).intValue() < targetMap.get(leftChar).intValue()) count--;
                left++;

            }
        }
        return minLen==Integer.MAX_VALUE ?"":s.substring(minLeft,minLeft+minLen);
    }
}
