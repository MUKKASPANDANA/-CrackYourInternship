class Solution {
    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {
        int n=quality.length;
        double[][] workers=new double[n][2];
        for(int i=0;i<n;i++){
            workers[i]=new double[]{(double) wage[i]/quality[i],quality[i]};
        }
        Arrays.sort(workers,Comparator.comparingDouble(a->a[0]));
        PriorityQueue<Integer> maxHeap=new PriorityQueue<>(Collections.reverseOrder());
        double minCost=Double.MAX_VALUE,qualitySum=0;
        for(double[] worker:workers){
            qualitySum+=worker[1];
            maxHeap.offer((int)worker[1]);
            if(maxHeap.size()>k){
                qualitySum-=maxHeap.poll();
            }
            if(maxHeap.size()==k){
                minCost=Math.min(minCost,qualitySum*worker[0]);
            }
        }
        return minCost;
    }
}
