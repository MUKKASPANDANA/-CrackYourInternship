public class Solution {
    public int removeBoxes(int[] boxes) {
        int n = boxes.length;
        int[][][] dp = new int[n][n][n]; // DP memoization table
        return dfs(boxes, 0, n - 1, 0, dp);
    }

    private int dfs(int[] boxes, int l, int r, int k, int[][][] dp) {
        if (l > r) return 0; // Base case: No boxes to remove
        if (dp[l][r][k] != 0) return dp[l][r][k]; // Return memoized result
        
        // Extend `k` to include consecutive boxes of the same color as boxes[r]
        while (r > l && boxes[r] == boxes[r - 1]) {
            r--;
            k++;
        }

        // Case 1: Remove boxes[r] (and contiguous k boxes)
        dp[l][r][k] = (k + 1) * (k + 1) + dfs(boxes, l, r - 1, 0, dp);

        // Case 2: Try merging boxes of the same color
        for (int i = l; i < r; i++) {
            if (boxes[i] == boxes[r]) {
                dp[l][r][k] = Math.max(dp[l][r][k],
                    dfs(boxes, l, i, k + 1, dp) + dfs(boxes, i + 1, r - 1, 0, dp));
            }
        }

        return dp[l][r][k];
    }
}
