import java.util.PriorityQueue;

class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        for (int i = 0; i < heights.length - 1; i++) {
            int diff = heights[i + 1] - heights[i];
            
            if (diff > 0) {
                minHeap.add(diff);
                
                // If more ladders are used than available, remove the smallest climb difference
                if (minHeap.size() > ladders) {
                    bricks -= minHeap.poll();  // Use bricks for the smallest climb
                }
                
                // If bricks run out, return the current building index
                if (bricks < 0) {
                    return i;
                }
            }
        }
        
        // If we reach here, we can traverse all buildings
        return heights.length - 1;
    }
}
