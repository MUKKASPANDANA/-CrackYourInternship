import java.util.*;

public class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        boolean[] visited = new boolean[n * n + 1];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{1, 0}); // {current square, moves}

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int square = current[0];
            int moves = current[1];

            if (square == n * n) return moves;

            for (int i = 1; i <= 6; i++) {
                int nextSquare = square + i;
                if (nextSquare > n * n) break;

                int[] position = getCoordinates(nextSquare, n);
                int row = position[0], col = position[1];

                if (board[row][col] != -1) {
                    nextSquare = board[row][col]; // Move to ladder/snake destination
                }

                if (!visited[nextSquare]) {
                    visited[nextSquare] = true;
                    queue.offer(new int[]{nextSquare, moves + 1});
                }
            }
        }
        return -1; // Not reachable
    }

    private int[] getCoordinates(int square, int n) {
        int row = (n - 1) - (square - 1) / n; // Calculate the row from the bottom
        int col = (square - 1) % n;
        if ((n - row) % 2 == 0) { // Even row index (Boustrophedon pattern)
            col = n - 1 - col; 
        }
        return new int[]{row, col};
    }
}
